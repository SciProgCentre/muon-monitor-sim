group 'ru.mipt.npm'
version '1.0'

buildscript {
    ext.kotlin_version = '1.1.0'

    repositories {
        jcenter()
        mavenCentral()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.3'
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:0.9.13"
    }
}

//apply plugin: 'java'
apply plugin: 'kotlin'
//apply plugin: 'org.jetbrains.dokka'
apply plugin: 'idea'
apply plugin: 'application'
apply plugin: 'com.github.johnrengelman.shadow'

mainClassName = "ru.mipt.npm.muon.sim.MainKt"

repositories {
    mavenCentral()
}

//dokka {
//    outputFormat = 'javadoc'
//    outputDirectory = "$buildDir/docs/kotlin"
//    sourceDirs = files('src/main/kotlin')
//}

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    compile "no.tornado:tornadofx:1.6.1"
    compile "org.apache.commons:commons-math3:3.6.1"

    // https://mvnrepository.com/artifact/org.glassfish/javax.json
    compile group: 'org.glassfish', name: 'javax.json', version: '1.0.4'

    // https://mvnrepository.com/artifact/commons-cli/commons-cli
    compile group: 'commons-cli', name: 'commons-cli', version: '1.3.1'

    testCompile group: 'junit', name: 'junit', version: '4.12'
}

task cliHelp(dependsOn: 'classes', type: JavaExec) {
    main = mainClassName
    group = "muonsim"
    classpath = sourceSets.main.runtimeClasspath
}

task monitorFX(dependsOn: 'classes', type: JavaExec) {
    main = mainClassName
    args = ["monitorFX"]
    group = "muonsim"
    classpath = sourceSets.main.runtimeClasspath
}

task simulate(dependsOn: 'classes', type: JavaExec) {
    main = mainClassName
    args = ["simulate", "-n", "10000000"]
    group = "muonsim"
    classpath = sourceSets.main.runtimeClasspath
}

task simulateRaw(dependsOn: 'classes', type: JavaExec) {
    main = mainClassName
    args = ["simulate", "-n", "100000", "-f", "simulation.raw", "-F", "raw"]
    group = "muonsim"
    classpath = sourceSets.main.runtimeClasspath
}

task simulateJSON(dependsOn: 'classes', type: JavaExec) {
    main = mainClassName
    args = ["simulate", "-n", "100000", "-f", "simulation.json", "-F", "json"]
    group = "muonsim"
    classpath = sourceSets.main.runtimeClasspath
}

task evalData3(dependsOn: 'classes', type: JavaExec) {
    main = mainClassName
    args = ["evalData", "-n", "10000000", "-f", "eval.dat", "--multiplicity=3"]
    group = "muonsim"
    classpath = sourceSets.main.runtimeClasspath
}

task evalData4(dependsOn: 'classes', type: JavaExec) {
    main = mainClassName
    args = ["evalData", "-n", "10000000", "-f", "eval4.dat", "--multiplicity=4"]
    group = "muonsim"
    classpath = sourceSets.main.runtimeClasspath
}

task evalDataAll(dependsOn: 'classes', type: JavaExec) {
    main = mainClassName
    args = ["evalData", "-n", "10000000", "-f", "evalAll.dat", "--multiplicity=-1"]
    group = "muonsim"
    classpath = sourceSets.main.runtimeClasspath
}

task eff(dependsOn: 'classes', type: JavaExec) {
    main = mainClassName
    args = ["efficiency"]
    standardOutput = java.lang.System.out
    group = "muonsim"
    classpath = sourceSets.main.runtimeClasspath
}

task evalDataFiltered(dependsOn: 'classes', type: JavaExec) {
    main = mainClassName
    args = ["evalData", "-n", "10000000", "-f", "evalFiltered.dat", "--multiplicity=-1", "-d=data_filtered.zip"]
    group = "muonsim"
    classpath = sourceSets.main.runtimeClasspath
}

task generateModelMap(dependsOn: 'classes', type: JavaExec) {
    main = mainClassName
    args = ["map", "-n", "1000000", "-f", "modelMap.dat"]
    group = "muonsim"
    classpath = sourceSets.main.runtimeClasspath
}

task generateMapWithData(dependsOn: 'classes', type: JavaExec) {
    main = mainClassName
    args = ["map", "-n", "1000000", "-f", "mapWithData.dat", "-d=data_filtered.zip"]
    group = "muonsim"
    classpath = sourceSets.main.runtimeClasspath
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.4'
}

sourceSets {
    main.java.srcDirs += 'src/main/kotlin'
}
