{
    "beaker": "2",
    "evaluators": [
        {
            "name": "HTML",
            "plugin": "HTML",
            "view": {
                "cm": {
                    "mode": "htmlmixed"
                }
            }
        },
        {
            "name": "JavaScript",
            "plugin": "JavaScript",
            "view": {
                "cm": {
                    "mode": "javascript",
                    "background": "#FFE0F0"
                }
            },
            "languageVersion": "ES2015"
        },
        {
            "name": "Groovy",
            "plugin": "Groovy",
            "imports": "graxxia.*\ncom.twosigma.beaker.NamespaceClient\ncom.twosigma.beaker.BeakerProgressUpdate\ncom.twosigma.beaker.chart.Color\ncom.twosigma.beaker.chart.GradientColor\ncom.twosigma.beaker.chart.legend.*\ncom.twosigma.beaker.chart.Filter\ncom.twosigma.beaker.chart.xychart.*\ncom.twosigma.beaker.chart.xychart.plotitem.*\ncom.twosigma.beaker.chart.categoryplot.*\ncom.twosigma.beaker.chart.categoryplot.plotitem.*\ncom.twosigma.beaker.chart.histogram.*\ncom.twosigma.beaker.chart.treemap.*\ncom.twosigma.beaker.chart.treemap.util.*\nnet.sf.jtreemap.swing.*\ncom.twosigma.beaker.chart.heatmap.HeatMap\ncom.twosigma.beaker.chart.KeyboardCodes\ncom.twosigma.beaker.jvm.object.*\ncom.twosigma.beaker.easyform.*\ncom.twosigma.beaker.easyform.formitem.*",
            "view": {
                "cm": {
                    "mode": "groovy"
                }
            }
        }
    ],
    "cells": [
        {
            "id": "markdownonkwxL",
            "type": "markdown",
            "body": [
                "## Set base enviorment"
            ],
            "evaluatorReader": false
        },
        {
            "id": "baseDirCell",
            "type": "code",
            "evaluator": "Groovy",
            "input": {
                "body": [
                    "baseDir = new File(\"D:\\\\Work\\\\MIPT\\\\Projects\\\\muonsim\")",
                    "",
                    "if(baseDir.exists()){",
                    "  baseDir",
                    "}else {",
                    "  println \"Base directory does not exist\";",
                    "}"
                ]
            },
            "output": {
                "state": {},
                "result": "D:\\Work\\MIPT\\Projects\\muonsim",
                "selectedType": "Text",
                "pluginName": "Groovy",
                "shellId": "e9423ca6-5ccd-4389-945d-6596ac4b3444",
                "elapsedTime": 1109,
                "height": 36
            },
            "evaluatorReader": true,
            "lineCount": 7,
            "tags": "required"
        },
        {
            "id": "jarFileCell",
            "type": "code",
            "evaluator": "Groovy",
            "input": {
                "body": [
                    "jarFile = new File(baseDir, \"build\\\\libs\\\\muonsim-1.0-SNAPSHOT-all.jar\")",
                    "",
                    "if(!jarFile.exists()){",
                    "  println \"jar file does not exist. Starting build\"",
                    "  def process = new ProcessBuilder(muonsimPath + \"gradlew.bat\", \"shadowJar\")",
                    "    .redirectErrorStream(true)",
                    "    .directory(new File(muonsimPath))",
                    "    .start()",
                    "  process.text.eachLine {println it}",
                    "}",
                    "",
                    "System.gc();",
                    "ClassLoader.systemClassLoader.addURL(jarFile.toURL())",
                    "println \"loaded fat jar from $jarFile\""
                ]
            },
            "output": {
                "state": {},
                "result": {
                    "type": "Results",
                    "outputdata": [
                        {
                            "type": "out",
                            "value": "loaded fat jar from D:\\Work\\MIPT\\Projects\\muonsim\\build\\libs\\muonsim-1.0-SNAPSHOT-all.jar\r\n"
                        }
                    ]
                },
                "selectedType": "Results",
                "pluginName": "Groovy",
                "shellId": "e9423ca6-5ccd-4389-945d-6596ac4b3444",
                "elapsedTime": 605,
                "height": 35
            },
            "evaluatorReader": true,
            "lineCount": 14,
            "tags": "required"
        },
        {
            "id": "markdownXs5bil",
            "type": "markdown",
            "body": [
                "## Reading data"
            ],
            "evaluatorReader": false
        },
        {
            "id": "code6Xru6F",
            "type": "code",
            "evaluator": "Groovy",
            "input": {
                "body": [
                    "dataFile = new File(baseDir,\"output\\\\evalAll.dat\")",
                    "",
                    "if(!dataFile.exists()){",
                    "  return \"DataFile does not exist\";",
                    "}",
                    "",
                    "// number of generated events",
                    "generatedNum = 1e7;",
                    "",
                    "// the total surface of effective central plane",
                    "surface = 16*12.5**2;",
                    "",
                    "/**",
                    "* track data class",
                    "*/",
                    "class TrackData{",
                    "  String trackName;",
                    "  double phi;",
                    "  double theta;",
                    "  double err;",
                    "  int dataCount;",
                    "  int simCount;",
                    "  ",
                    "  def getMultiplicity(){",
                    "    return trackName.split(\",\").length",
                    "  }",
                    "}",
                    "",
                    "//reading file data",
                    "allTracks = []",
                    "dataFile.eachLine{ str, num ->",
                    "  if(num != 1){",
                    "    def nameEnd = str.indexOf(\"]\")",
                    "    String name = str.substring(0,nameEnd+1);",
                    "    List numbers = str.substring(nameEnd + 1).tokenize();",
                    "    allTracks << new TrackData(trackName: name, dataCount: numbers[0].toInteger(),",
                    "                            simCount:numbers[1].toInteger(), phi: numbers[2].toDouble(),",
                    "                            theta: numbers[3].toDouble(), err: numbers[4].toDouble())",
                    "  }",
                    "}",
                    "",
                    "//filtering events with data count less than 3",
                    "tracks = allTracks.findAll{it.dataCount >= 3}",
                    "",
                    "thetaMax = tracks.stream().mapToDouble{it.theta}.max().getAsDouble();",
                    "println \"thetaMax: ${thetaMax}\"",
                    "totalDataCounts = tracks.stream().mapToInt{it.dataCount.toInteger()}.sum();",
                    "println \"totalDataCounts: ${totalDataCounts}\"",
                    "totalSimCounts = tracks.stream().mapToInt{it.simCount.toInteger()}.sum();",
                    "println \"totalSimCounts: ${totalSimCounts}\""
                ]
            },
            "output": {
                "state": {},
                "result": {
                    "type": "Results",
                    "outputdata": [
                        {
                            "type": "out",
                            "value": "thetaMax: 1.283\r\ntotalDataCounts: 117843\r\ntotalSimCounts: 3142032\r\n"
                        }
                    ]
                },
                "selectedType": "Results",
                "pluginName": "Groovy",
                "shellId": "e9423ca6-5ccd-4389-945d-6596ac4b3444",
                "elapsedTime": 611,
                "height": 67
            },
            "evaluatorReader": true,
            "lineCount": 50,
            "tags": "required"
        },
        {
            "id": "section5nxsk9",
            "type": "section",
            "title": "Calculatin total flux via averaging",
            "level": 2,
            "evaluatorReader": false,
            "collapsed": false
        },
        {
            "id": "markdownmj9zhd",
            "type": "markdown",
            "body": [
                "##Calculatin total flux"
            ],
            "evaluatorReader": false
        },
        {
            "id": "codenE3fRL",
            "type": "code",
            "evaluator": "Groovy",
            "input": {
                "body": [
                    "",
                    "def av(List<TrackData> list){",
                    "  def totalSim = list.sum{it.simCount}",
                    "  //return list.sum{it.dataCount / it.simCount}/list.size()* generatedNum",
                    "  return list.sum{it.dataCount}/list.sum{it.simCount}*generatedNum",
                    "  //return list.sum{it.dataCount*it.dataCount / it.simCount * generatedNum}/list.sum{it.dataCount}",
                    "}",
                    "println \"wav for all tracks: ${av(allTracks)}\"",
                    "//println \"wav for selected tracks: ${av(selected)}\"",
                    "",
                    "Plot plot = new Plot(xLabel: \"minimal data counts\", yLabel: \"weighted average\");",
                    "def xs = [];",
                    "def ys = [];",
                    "for(i in (1..30)){",
                    "  xs << i",
                    "  //def selected = allTracks.findAll{it.dataCount >= i  && it.multiplicity == 3}",
                    "  def selected = allTracks.findAll{it.dataCount >= i}",
                    "",
                    "  ys << av(selected)",
                    "}",
                    "",
                    "plot << new Points(x: xs, y: ys)",
                    "",
                    ""
                ]
            },
            "output": {
                "state": {},
                "result": {
                    "type": "Results",
                    "outputdata": [
                        {
                            "type": "out",
                            "value": "wav for all tracks: 377462.299\r\n"
                        }
                    ],
                    "payload": {
                        "update_id": "c6c8bd69-09d4-4575-81d7-fad7ad98168e",
                        "type": "Plot",
                        "init_width": 640,
                        "init_height": 480,
                        "chart_title": null,
                        "show_legend": null,
                        "use_tool_tip": true,
                        "legend_position": {
                            "type": "LegendPosition",
                            "position": "TOP_RIGHT"
                        },
                        "legend_layout": "VERTICAL",
                        "domain_axis_label": "minimal data counts",
                        "y_label": "weighted average",
                        "rangeAxes": [
                            {
                                "type": "YAxis",
                                "label": "weighted average",
                                "auto_range": true,
                                "auto_range_includes_zero": false,
                                "lower_margin": 0.05,
                                "upper_margin": 0.05,
                                "lower_bound": 0,
                                "upper_bound": 0,
                                "use_log": false,
                                "log_base": 10
                            }
                        ],
                        "x_lower_margin": 0.05,
                        "x_upper_margin": 0.05,
                        "y_auto_range": true,
                        "y_auto_range_includes_zero": false,
                        "y_lower_margin": 0.05,
                        "y_upper_margin": 0.05,
                        "y_lower_bound": 0,
                        "y_upper_bound": 0,
                        "log_y": false,
                        "timezone": null,
                        "crosshair": null,
                        "omit_checkboxes": false,
                        "graphics_list": [
                            {
                                "type": "Points",
                                "uid": "8027d239-efa7-4b6c-adcb-6b5cdd0b3e36",
                                "visible": true,
                                "yAxis": null,
                                "hasClickAction": false,
                                "x": [
                                    1,
                                    2,
                                    3,
                                    4,
                                    5,
                                    6,
                                    7,
                                    8,
                                    9,
                                    10,
                                    11,
                                    12,
                                    13,
                                    14,
                                    15,
                                    16,
                                    17,
                                    18,
                                    19,
                                    20,
                                    21,
                                    22,
                                    23,
                                    24,
                                    25,
                                    26,
                                    27,
                                    28,
                                    29,
                                    30
                                ],
                                "y": [
                                    377462.299,
                                    376711.181,
                                    375053.469,
                                    374201.317,
                                    372411.442,
                                    371001.716,
                                    371104.953,
                                    370653.17,
                                    371905.939,
                                    373393.286,
                                    375506.487,
                                    377967.6,
                                    378450.733,
                                    379630.225,
                                    380099.905,
                                    380914.905,
                                    382924.643,
                                    385026.484,
                                    385249.236,
                                    389555.322,
                                    392071.621,
                                    394351.564,
                                    398300.128,
                                    402998.283,
                                    408389.434,
                                    413223.625,
                                    418368.71,
                                    423655.211,
                                    428770.13,
                                    435590.814
                                ],
                                "display_name": "",
                                "size": 6,
                                "shape": "DEFAULT",
                                "fill": null,
                                "color": null,
                                "outline_color": null
                            }
                        ],
                        "constant_lines": [],
                        "constant_bands": [],
                        "texts": [],
                        "x_auto_range": true,
                        "x_lower_bound": 0,
                        "x_upper_bound": 0,
                        "log_x": false,
                        "x_log_base": 10,
                        "tips": {}
                    }
                },
                "selectedType": "Results",
                "pluginName": "Groovy",
                "shellId": "e9423ca6-5ccd-4389-945d-6596ac4b3444",
                "elapsedTime": 616,
                "height": 520
            },
            "evaluatorReader": true,
            "lineCount": 24
        },
        {
            "id": "section3kAYfL",
            "type": "section",
            "title": "Searching for inefficient pixels",
            "level": 2,
            "evaluatorReader": false,
            "collapsed": true
        },
        {
            "id": "markdownRcQtnl",
            "type": "markdown",
            "body": [
                "## Searching for inefficient pixels",
                "dumb $n^2$ algorithm"
            ],
            "evaluatorReader": false
        },
        {
            "id": "codeAG4sKD",
            "type": "code",
            "evaluator": "Groovy",
            "input": {
                "body": [
                    "def candidates = new HashSet()",
                    "",
                    "def isParallel(track1, track2){",
                    "  return Math.abs(track1.phi - track2.phi) < 0.002 && Math.abs(track1.theta - track2.theta) < 0.002",
                    "}",
                    "",
                    "//searching for pixel among parallel ones with number of counts less than in parallel ones",
                    "for(track in tracks){",
                    "  for(secondTrack in tracks){",
                    "    if(isParallel(track, secondTrack)){",
                    "      //selecting ones beyond 3 sigma bound",
                    "      if(track.dataCount < secondTrack.dataCount - 3*Math.sqrt(secondTrack.dataCount)){",
                    "        candidates << track",
                    "      }",
                    "    }",
                    "  }",
                    "}",
                    "",
                    "Map<String, Integer> pixelCandidates = [:]",
                    "",
                    "candidates.each{",
                    "//  println it.trackName",
                    "  it.trackName.substring(1, it.trackName.size() - 1).split(\",\"). each{pixel ->",
                    "    def pixelName = pixel.trim();",
                    "    pixelCandidates.put(pixelName, (pixelCandidates.get(pixelName) ?: 0) + 1)",
                    "  }",
                    "}",
                    "",
                    "pixelCandidates",
                    ""
                ]
            },
            "output": {
                "state": {},
                "result": {
                    "type": "TableDisplay",
                    "columnNames": [
                        "Key",
                        "Value"
                    ],
                    "values": [
                        [
                            "SC75_7",
                            5
                        ],
                        [
                            "SC82_11",
                            2
                        ],
                        [
                            "SC93_12",
                            2
                        ],
                        [
                            "SC79_6",
                            2
                        ],
                        [
                            "SC81_2",
                            3
                        ],
                        [
                            "SC92_0",
                            3
                        ],
                        [
                            "SC76_2",
                            2
                        ],
                        [
                            "SC82_9",
                            2
                        ],
                        [
                            "SC93_7",
                            1
                        ],
                        [
                            "SC77_0",
                            1
                        ],
                        [
                            "SC80_8",
                            4
                        ],
                        [
                            "SC81_14",
                            5
                        ],
                        [
                            "SC91_1",
                            2
                        ],
                        [
                            "SC77_2",
                            5
                        ],
                        [
                            "SC83_5",
                            3
                        ],
                        [
                            "SC94_0",
                            2
                        ],
                        [
                            "SC75_15",
                            3
                        ],
                        [
                            "SC84_8",
                            5
                        ],
                        [
                            "SC96_13",
                            4
                        ],
                        [
                            "SC75_4",
                            1
                        ],
                        [
                            "SC84_3",
                            3
                        ],
                        [
                            "SC82_8",
                            5
                        ],
                        [
                            "SC84_0",
                            4
                        ],
                        [
                            "SC93_15",
                            2
                        ],
                        [
                            "SC77_9",
                            3
                        ],
                        [
                            "SC83_4",
                            1
                        ],
                        [
                            "SC91_11",
                            3
                        ],
                        [
                            "SC76_15",
                            3
                        ],
                        [
                            "SC83_9",
                            4
                        ],
                        [
                            "SC85_14",
                            1
                        ],
                        [
                            "SC79_15",
                            2
                        ],
                        [
                            "SC81_13",
                            6
                        ],
                        [
                            "SC91_2",
                            3
                        ],
                        [
                            "SC76_9",
                            3
                        ],
                        [
                            "SC83_10",
                            5
                        ],
                        [
                            "SC83_2",
                            7
                        ],
                        [
                            "SC85_6",
                            5
                        ],
                        [
                            "SC74_3",
                            2
                        ],
                        [
                            "SC83_8",
                            1
                        ],
                        [
                            "SC76_1",
                            1
                        ],
                        [
                            "SC84_7",
                            3
                        ],
                        [
                            "SC92_8",
                            2
                        ],
                        [
                            "SC77_1",
                            2
                        ],
                        [
                            "SC83_6",
                            3
                        ],
                        [
                            "SC75_6",
                            4
                        ],
                        [
                            "SC84_2",
                            2
                        ],
                        [
                            "SC96_1",
                            2
                        ],
                        [
                            "SC83_13",
                            6
                        ],
                        [
                            "SC94_2",
                            3
                        ],
                        [
                            "SC75_9",
                            1
                        ],
                        [
                            "SC96_5",
                            2
                        ],
                        [
                            "SC93_1",
                            1
                        ],
                        [
                            "SC80_11",
                            1
                        ],
                        [
                            "SC91_5",
                            3
                        ],
                        [
                            "SC93_13",
                            2
                        ],
                        [
                            "SC76_11",
                            2
                        ],
                        [
                            "SC96_15",
                            1
                        ],
                        [
                            "SC80_9",
                            4
                        ],
                        [
                            "SC85_9",
                            1
                        ],
                        [
                            "SC76_13",
                            3
                        ],
                        [
                            "SC84_14",
                            3
                        ],
                        [
                            "SC85_1",
                            3
                        ],
                        [
                            "SC96_0",
                            1
                        ],
                        [
                            "SC72_7",
                            2
                        ],
                        [
                            "SC84_11",
                            1
                        ],
                        [
                            "SC96_9",
                            1
                        ],
                        [
                            "SC80_10",
                            3
                        ],
                        [
                            "SC81_5",
                            4
                        ],
                        [
                            "SC92_6",
                            6
                        ],
                        [
                            "SC79_10",
                            3
                        ],
                        [
                            "SC82_1",
                            3
                        ],
                        [
                            "SC93_5",
                            4
                        ],
                        [
                            "SC79_7",
                            1
                        ],
                        [
                            "SC81_3",
                            2
                        ],
                        [
                            "SC87_8",
                            1
                        ],
                        [
                            "SC76_3",
                            3
                        ],
                        [
                            "SC76_5",
                            5
                        ],
                        [
                            "SC85_0",
                            4
                        ],
                        [
                            "SC78_14",
                            2
                        ],
                        [
                            "SC74_0",
                            1
                        ],
                        [
                            "SC84_12",
                            1
                        ],
                        [
                            "SC85_10",
                            2
                        ],
                        [
                            "SC76_12",
                            3
                        ],
                        [
                            "SC80_13",
                            1
                        ],
                        [
                            "SC81_7",
                            3
                        ],
                        [
                            "SC86_1",
                            1
                        ],
                        [
                            "SC77_8",
                            2
                        ],
                        [
                            "SC85_7",
                            3
                        ],
                        [
                            "SC79_5",
                            3
                        ],
                        [
                            "SC92_4",
                            2
                        ],
                        [
                            "SC77_10",
                            1
                        ],
                        [
                            "SC94_10",
                            1
                        ],
                        [
                            "SC79_1",
                            2
                        ],
                        [
                            "SC82_7",
                            2
                        ],
                        [
                            "SC87_12",
                            1
                        ],
                        [
                            "SC81_12",
                            2
                        ],
                        [
                            "SC92_14",
                            3
                        ],
                        [
                            "SC73_6",
                            1
                        ],
                        [
                            "SC83_11",
                            1
                        ],
                        [
                            "SC85_13",
                            1
                        ],
                        [
                            "SC77_13",
                            3
                        ],
                        [
                            "SC83_7",
                            2
                        ],
                        [
                            "SC84_9",
                            2
                        ],
                        [
                            "SC84_1",
                            3
                        ],
                        [
                            "SC96_7",
                            2
                        ],
                        [
                            "SC81_15",
                            3
                        ],
                        [
                            "SC91_9",
                            1
                        ],
                        [
                            "SC92_7",
                            1
                        ],
                        [
                            "SC78_5",
                            4
                        ],
                        [
                            "SC82_2",
                            4
                        ],
                        [
                            "SC93_4",
                            2
                        ],
                        [
                            "SC76_6",
                            1
                        ],
                        [
                            "SC83_3",
                            2
                        ],
                        [
                            "SC76_14",
                            2
                        ],
                        [
                            "SC79_13",
                            1
                        ],
                        [
                            "SC76_4",
                            2
                        ],
                        [
                            "SC81_1",
                            4
                        ],
                        [
                            "SC86_10",
                            3
                        ],
                        [
                            "SC93_0",
                            3
                        ],
                        [
                            "SC73_7",
                            1
                        ],
                        [
                            "SC85_5",
                            4
                        ],
                        [
                            "SC81_8",
                            1
                        ],
                        [
                            "SC77_3",
                            4
                        ],
                        [
                            "SC86_8",
                            2
                        ],
                        [
                            "SC79_11",
                            5
                        ],
                        [
                            "SC82_12",
                            5
                        ],
                        [
                            "SC82_13",
                            6
                        ],
                        [
                            "SC92_10",
                            4
                        ],
                        [
                            "SC78_6",
                            1
                        ],
                        [
                            "SC82_3",
                            2
                        ],
                        [
                            "SC92_11",
                            3
                        ],
                        [
                            "SC84_4",
                            2
                        ],
                        [
                            "SC79_12",
                            2
                        ],
                        [
                            "SC81_11",
                            2
                        ],
                        [
                            "SC92_13",
                            2
                        ],
                        [
                            "SC84_6",
                            3
                        ],
                        [
                            "SC85_3",
                            2
                        ],
                        [
                            "SC75_5",
                            2
                        ],
                        [
                            "SC96_4",
                            1
                        ],
                        [
                            "SC84_5",
                            1
                        ],
                        [
                            "SC74_2",
                            1
                        ],
                        [
                            "SC75_12",
                            2
                        ],
                        [
                            "SC84_10",
                            3
                        ],
                        [
                            "SC72_4",
                            1
                        ],
                        [
                            "SC80_1",
                            1
                        ],
                        [
                            "SC81_6",
                            4
                        ],
                        [
                            "SC91_3",
                            1
                        ],
                        [
                            "SC79_2",
                            1
                        ],
                        [
                            "SC82_5",
                            1
                        ],
                        [
                            "SC92_2",
                            4
                        ],
                        [
                            "SC79_9",
                            2
                        ],
                        [
                            "SC73_3",
                            1
                        ],
                        [
                            "SC96_14",
                            1
                        ],
                        [
                            "SC92_9",
                            3
                        ],
                        [
                            "SC83_14",
                            1
                        ],
                        [
                            "SC94_9",
                            1
                        ],
                        [
                            "SC82_6",
                            3
                        ],
                        [
                            "SC92_5",
                            1
                        ],
                        [
                            "SC82_10",
                            2
                        ],
                        [
                            "SC94_3",
                            1
                        ],
                        [
                            "SC76_7",
                            1
                        ],
                        [
                            "SC87_14",
                            1
                        ],
                        [
                            "SC81_0",
                            2
                        ],
                        [
                            "SC87_15",
                            1
                        ],
                        [
                            "SC92_1",
                            3
                        ],
                        [
                            "SC83_0",
                            2
                        ],
                        [
                            "SC82_15",
                            1
                        ],
                        [
                            "SC76_0",
                            1
                        ],
                        [
                            "SC80_2",
                            2
                        ],
                        [
                            "SC91_4",
                            1
                        ],
                        [
                            "SC82_14",
                            1
                        ],
                        [
                            "SC73_4",
                            1
                        ],
                        [
                            "SC78_15",
                            2
                        ],
                        [
                            "SC93_14",
                            1
                        ],
                        [
                            "SC85_4",
                            2
                        ],
                        [
                            "SC75_14",
                            2
                        ],
                        [
                            "SC96_6",
                            1
                        ],
                        [
                            "SC84_15",
                            1
                        ],
                        [
                            "SC82_0",
                            1
                        ],
                        [
                            "SC88_15",
                            1
                        ],
                        [
                            "SC80_5",
                            1
                        ],
                        [
                            "SC86_11",
                            2
                        ],
                        [
                            "SC83_1",
                            1
                        ],
                        [
                            "SC80_12",
                            1
                        ],
                        [
                            "SC93_6",
                            1
                        ],
                        [
                            "SC91_12",
                            1
                        ],
                        [
                            "SC73_2",
                            1
                        ],
                        [
                            "SC84_13",
                            1
                        ],
                        [
                            "SC76_10",
                            1
                        ],
                        [
                            "SC78_13",
                            1
                        ],
                        [
                            "SC88_12",
                            1
                        ]
                    ],
                    "subtype": "Dictionary"
                },
                "selectedType": "Table",
                "pluginName": "Groovy",
                "shellId": "30067bc0-9ac5-4ce2-a9f5-750b0bcd10d4",
                "elapsedTime": 14874,
                "height": 0
            },
            "evaluatorReader": true,
            "lineCount": 30
        },
        {
            "id": "sectionOQl02I",
            "type": "section",
            "title": "Generating 2d function using gauss smoothing with widths proportional to errors",
            "level": 2,
            "evaluatorReader": false,
            "collapsed": true
        },
        {
            "id": "markdownrHU49j",
            "type": "markdown",
            "body": [
                "## Generating 2d function using gauss smoothing with widths proportional to errors",
                "In order to get smooth picture, we need multiply errors by a factor of 3"
            ],
            "evaluatorReader": false
        },
        {
            "id": "codefa0K5N",
            "type": "code",
            "evaluator": "Groovy",
            "input": {
                "body": [
                    "simTracks = []",
                    "File dataFile = new File(baseDir,\"output\\\\hits.dat\") ",
                    "dataFile.eachLine{ str, num ->",
                    "  if(num != 1){",
                    "    def nameEnd = str.indexOf(\"]\")",
                    "    String name = str.substring(0,nameEnd+1);",
                    "    List numbers = str.substring(nameEnd + 1).tokenize();",
                    "    simTracks << new TrackData(trackName: name, dataCount: 0,",
                    "                            simCount:numbers[0].toInteger(), phi: numbers[1].toDouble(),",
                    "                            theta: numbers[2].toDouble(), err: numbers[3].toDouble())",
                    "  }",
                    "}",
                    "",
                    "thetaMax = simTracks.stream().mapToDouble{it.theta}.max().getAsDouble();",
                    "totalSimCounts = simTracks.stream().mapToInt{it.simCount.toInteger()}.sum();",
                    "",
                    "",
                    "println \"file read complete\"",
                    "",
                    "//bivariate uncorrelated normal distribution",
                    "double gaussian(phi,theta,sigma,phi0,theta0){",
                    "  double res = 1/(2*Math.PI*sigma**2)*Math.exp(-(phi-phi0)**2/sigma**2 - (theta - theta0)**2/sigma**2)",
                    "  if(!Double.isNaN(res)){",
                    "    return res;",
                    "  } else{",
                    "    return 0d;",
                    "  }",
                    "}",
                    "",
                    "// using method instead of closure for performance",
                    "double sum(phi0,theta0){",
                    "  simTracks.stream().mapToDouble{track -> track.simCount.toDouble()*gaussian(track.phi, track.theta, track.err, phi0,theta0)}.average().getAsDouble()",
                    "  //tracks.stream().mapToDouble{track -> track.dataCount.toDouble() / track.simCount.toDouble() * gaussian(track.phi, track.theta, track.err*3, phi0,theta0)}.sum()",
                    "}",
                    "",
                    "//defining grid",
                    "def phiNodes = 60;",
                    "def thetaNodes = 40;",
                    "",
                    "def phiStep = 2* Math.PI / phiNodes;",
                    "def thetaStep = thetaMax / thetaNodes;",
                    "List<List> nodes = []",
                    "",
                    "for(double phi = -Math.PI; phi < Math.PI;  phi += phiStep){",
                    "  for(double theta = 0; theta < thetaMax; theta += thetaStep){",
                    "    nodes << [phi*180/Math.PI, theta*180/Math.PI, sum(phi,theta)]",
                    "  }",
                    "}",
                    "",
                    "nodes",
                    "",
                    "//printing results",
                    "//for(Tuple node: nodes){",
                    "//  println \"${node[0]}\\t${node[1]}\\t${node[2] / totalDataCounts * totalSimCounts}\"",
                    "//}"
                ]
            },
            "output": {
                "state": {},
                "result": {
                    "type": "BeakerDisplay",
                    "innertype": "Error",
                    "object": [
                        "java.io.FileNotFoundException: D:\\Work\\MIPT\\Projects\\muonsim\\hits.dat (The system cannot find the file specified)\r<br/>",
                        "\tat script1476615373462594597305.run(script1476615373462594597305.groovy:3)\r",
                        "\tat com.twosigma.beaker.groovy.utils.GroovyEvaluator$workerThread$MyRunnable.run(GroovyEvaluator.java:378)\r",
                        ""
                    ]
                },
                "selectedType": "BeakerDisplay",
                "pluginName": "Groovy",
                "shellId": "2505fdcd-352d-4032-95de-84dd1f7e86b2",
                "elapsedTime": 587,
                "height": 0
            },
            "evaluatorReader": true,
            "lineCount": 55
        },
        {
            "id": "sectionzwfP85",
            "type": "section",
            "title": "Fit using spherical garmonics",
            "level": 2,
            "evaluatorReader": false,
            "collapsed": false
        },
        {
            "id": "markdownuJgsDF",
            "type": "markdown",
            "body": [
                "## Fit using spherical garmonics"
            ],
            "evaluatorReader": false
        },
        {
            "id": "markdownYuERze",
            "type": "markdown",
            "body": [
                "Clear or initialize result",
                "Reuse results with different dimensions"
            ],
            "evaluatorReader": false
        },
        {
            "id": "codeOrvswh",
            "type": "code",
            "evaluator": "Groovy",
            "input": {
                "body": [
                    "fitResult = null",
                    "resizeFitResult = {double[] result, int dim ->",
                    "  if(result.length == dim){",
                    "    return result",
                    "  } else {",
                    "    def res = new double[dim]",
                    "    System.arraycopy(result,0,res,0,Math.min(dim,result.length))",
                    "    return res;",
                    "  }",
                    "}"
                ]
            },
            "output": {
                "state": {},
                "selectedType": "Text",
                "pluginName": "Groovy",
                "shellId": "30067bc0-9ac5-4ce2-a9f5-750b0bcd10d4",
                "elapsedTime": 694,
                "result": "script1477037116281598805947$_run_closure1@34b1e5cc",
                "height": 36
            },
            "evaluatorReader": true,
            "lineCount": 10
        },
        {
            "id": "sectione1KZrL",
            "type": "section",
            "title": "Simplex",
            "level": 3,
            "evaluatorReader": false,
            "collapsed": false
        },
        {
            "id": "markdownJBHkGi",
            "type": "markdown",
            "body": [
                "### Simplex"
            ],
            "evaluatorReader": false
        },
        {
            "id": "codeTPDPQY",
            "type": "code",
            "evaluator": "Groovy",
            "input": {
                "body": [
                    "import ru.mipt.npm.muon.sim.SphericalHarmonics.Point;",
                    "import ru.mipt.npm.muon.sim.SphericalHarmonics.Coef;",
                    "import ru.mipt.npm.muon.sim.SphericalHarmonics;",
                    "import org.apache.commons.math3.optim.*",
                    "import org.apache.commons.math3.optim.nonlinear.scalar.*",
                    "import org.apache.commons.math3.optim.nonlinear.scalar.noderiv.*",
                    "import java.util.stream.Collectors;",
                    "",
                    "int l = 10;",
                    "",
                    "points = tracks.stream().map{ new Point(it.theta, it.phi,it.dataCount/it.simCount*generatedNum,Math.sqrt(it.dataCount)/it.simCount*generatedNum)}.toArray{i -> new Point[i]}",
                    "",
                    "def dim = (l+1)**2;",
                    "def optimizer = new SimplexOptimizer(0.001, 0.001);",
                    "",
                    "def start = fitResult ? resizeFitResult(fitResult, dim) : new double[dim];",
                    "//def start = new double[dim];",
                    "def steps = new double[dim];",
                    "",
                    "Arrays.fill(steps,100)",
                    "",
                    "def function = SphericalHarmonics.chi2SphericalFunction(points);",
                    "",
                    "def res = optimizer.optimize(",
                    "  new ObjectiveFunction(function),",
                    "  GoalType.MINIMIZE,",
                    "  new NelderMeadSimplex(steps),",
                    "  new InitialGuess(start),",
                    "  new MaxEval(1e7 as int),",
                    "  new MaxIter(1e5 as int)",
                    ")",
                    "",
                    "fitResult = res.getPoint()",
                    "",
                    "println \"chi^2 = ${res.getValue()}/${points.length} = ${res.getValue()/points.length}\";"
                ]
            },
            "output": {
                "state": {},
                "selectedType": "Results",
                "pluginName": "Groovy",
                "shellId": "51ae3366-b94e-4077-80d4-f5155cb0ac53",
                "elapsedTime": 132215,
                "height": 681
            },
            "evaluatorReader": true,
            "lineCount": 35
        },
        {
            "id": "sectionim6R3r",
            "type": "section",
            "title": "Conjugate gradient",
            "level": 3,
            "evaluatorReader": false,
            "collapsed": false
        },
        {
            "id": "markdown1JAVvS",
            "type": "markdown",
            "body": [
                "### Conjugate gradient"
            ],
            "evaluatorReader": false
        },
        {
            "id": "codeoZyiyD",
            "type": "code",
            "evaluator": "Groovy",
            "input": {
                "body": [
                    "import ru.mipt.npm.muon.sim.SphericalHarmonics.Point;",
                    "import ru.mipt.npm.muon.sim.SphericalHarmonics.Coef;",
                    "import ru.mipt.npm.muon.sim.SphericalHarmonics;",
                    "import org.apache.commons.math3.optim.*",
                    "import org.apache.commons.math3.optim.nonlinear.scalar.*",
                    "import org.apache.commons.math3.optim.nonlinear.scalar.gradient.*",
                    "import java.util.stream.Collectors;",
                    "",
                    "int l = 12;",
                    "",
                    "points = tracks.stream().map{ new Point(it.theta, it.phi,it.dataCount/it.simCount*generatedNum,Math.sqrt(it.dataCount)/it.simCount*generatedNum)}.toArray{i -> new Point[i]}",
                    "",
                    "def dim = (l+1)**2;",
                    "",
                    "ConvergenceChecker<PointValuePair> checker = {i,prev,current -> (i > 500) || (Math.abs(prev.value - current.value) < 1.0) }",
                    "",
                    "def optimizer = new NonLinearConjugateGradientOptimizer(NonLinearConjugateGradientOptimizer.Formula.FLETCHER_REEVES, checker);",
                    "",
                    "def start = fitResult ? resizeFitResult(fitResult, dim) : new double[dim];",
                    "",
                    "def function = SphericalHarmonics.chi2SphericalFunction(points);",
                    "def gradient = SphericalHarmonics.chi2GradientFunction(points);",
                    "",
                    "def res = optimizer.optimize(",
                    "  new ObjectiveFunction(function),",
                    "  GoalType.MINIMIZE,",
                    "  new ObjectiveFunctionGradient(gradient),",
                    "  new InitialGuess(start),",
                    "  new MaxEval(1e7 as int),",
                    "  new MaxIter(1e5 as int)",
                    ")",
                    "",
                    "fitResult = res.getPoint()",
                    "",
                    "println \"chi^2 = ${res.getValue()}/${points.length} = ${res.getValue()/points.length}\";"
                ]
            },
            "output": {
                "state": {},
                "result": {
                    "type": "Results",
                    "outputdata": [
                        {
                            "type": "out",
                            "value": "chi^2 = 19476.555715689912/12380 = 1.5732274406857765\r\n\r\nspherical coefficients:\r\n"
                        }
                    ],
                    "payload": {
                        "type": "TableDisplay",
                        "columnNames": [
                            "l",
                            "m",
                            "value"
                        ],
                        "values": [
                            [
                                0,
                                0,
                                259537.48984419942
                            ],
                            [
                                1,
                                -1,
                                2505.599580061921
                            ],
                            [
                                1,
                                0,
                                334974.36151170754
                            ],
                            [
                                1,
                                1,
                                112243.44223508907
                            ],
                            [
                                2,
                                -2,
                                -17769.131299188735
                            ],
                            [
                                2,
                                -1,
                                -1257.6321232072094
                            ],
                            [
                                2,
                                0,
                                213433.25768100732
                            ],
                            [
                                2,
                                1,
                                168702.59527441775
                            ],
                            [
                                2,
                                2,
                                36108.639757707075
                            ],
                            [
                                3,
                                -3,
                                -1215.2421538201074
                            ],
                            [
                                3,
                                -2,
                                -34224.227604186985
                            ],
                            [
                                3,
                                -1,
                                -11165.692432830021
                            ],
                            [
                                3,
                                0,
                                30773.299147173504
                            ],
                            [
                                3,
                                1,
                                143665.35451866468
                            ],
                            [
                                3,
                                2,
                                59536.86106766112
                            ],
                            [
                                3,
                                3,
                                3662.4354540737045
                            ],
                            [
                                4,
                                -4,
                                3824.4878645478952
                            ],
                            [
                                4,
                                -3,
                                -4794.559858837871
                            ],
                            [
                                4,
                                -2,
                                -42188.913292308454
                            ],
                            [
                                4,
                                -1,
                                -20342.642156308135
                            ],
                            [
                                4,
                                0,
                                -86589.2089627129
                            ],
                            [
                                4,
                                1,
                                64152.96901594361
                            ],
                            [
                                4,
                                2,
                                58416.744553209464
                            ],
                            [
                                4,
                                3,
                                6011.7164650271325
                            ],
                            [
                                4,
                                4,
                                3064.664551170799
                            ],
                            [
                                5,
                                -5,
                                2940.233287831205
                            ],
                            [
                                5,
                                -4,
                                5809.2590894461355
                            ],
                            [
                                5,
                                -3,
                                -10368.859471885466
                            ],
                            [
                                5,
                                -2,
                                -36331.53013173852
                            ],
                            [
                                5,
                                -1,
                                -20623.947486019766
                            ],
                            [
                                5,
                                0,
                                -90473.31176035282
                            ],
                            [
                                5,
                                1,
                                -8879.309863676961
                            ],
                            [
                                5,
                                2,
                                35777.85069293692
                            ],
                            [
                                5,
                                3,
                                6363.698220085543
                            ],
                            [
                                5,
                                4,
                                6092.5259346590055
                            ],
                            [
                                5,
                                5,
                                3594.06472458405
                            ],
                            [
                                6,
                                -6,
                                -774.9839821819127
                            ],
                            [
                                6,
                                -5,
                                5002.056004732534
                            ],
                            [
                                6,
                                -4,
                                3693.5006920620663
                            ],
                            [
                                6,
                                -3,
                                -15058.273991630047
                            ],
                            [
                                6,
                                -2,
                                -19777.742898083237
                            ],
                            [
                                6,
                                -1,
                                -10281.741033023602
                            ],
                            [
                                6,
                                0,
                                -24715.69485286512
                            ],
                            [
                                6,
                                1,
                                -35222.30260022664
                            ],
                            [
                                6,
                                2,
                                10964.208686182546
                            ],
                            [
                                6,
                                3,
                                6279.641337954159
                            ],
                            [
                                6,
                                4,
                                7616.601054469683
                            ],
                            [
                                6,
                                5,
                                6862.331704389502
                            ],
                            [
                                6,
                                6,
                                1421.1653161403972
                            ],
                            [
                                7,
                                -7,
                                1443.3202722390508
                            ],
                            [
                                7,
                                -6,
                                -2084.6430810075835
                            ],
                            [
                                7,
                                -5,
                                4324.157511471447
                            ],
                            [
                                7,
                                -4,
                                -2313.3684739694895
                            ],
                            [
                                7,
                                -3,
                                -15367.596339959462
                            ],
                            [
                                7,
                                -2,
                                -2197.955451163203
                            ],
                            [
                                7,
                                -1,
                                4002.8101111692554
                            ],
                            [
                                7,
                                0,
                                31243.581051741843
                            ],
                            [
                                7,
                                1,
                                -22332.109412199527
                            ],
                            [
                                7,
                                2,
                                545.8624956516122
                            ],
                            [
                                7,
                                3,
                                8746.438306186154
                            ],
                            [
                                7,
                                4,
                                6617.331909763452
                            ],
                            [
                                7,
                                5,
                                7259.390594316538
                            ],
                            [
                                7,
                                6,
                                3055.321202549915
                            ],
                            [
                                7,
                                7,
                                682.1978796993118
                            ],
                            [
                                8,
                                -8,
                                -284.0315933102503
                            ],
                            [
                                8,
                                -7,
                                3898.5480231351266
                            ],
                            [
                                8,
                                -6,
                                -3598.837379250238
                            ],
                            [
                                8,
                                -5,
                                429.89921223074737
                            ],
                            [
                                8,
                                -4,
                                -8246.829359027905
                            ],
                            [
                                8,
                                -3,
                                -10258.500336184416
                            ],
                            [
                                8,
                                -2,
                                7141.545948387311
                            ],
                            [
                                8,
                                -1,
                                12780.151089135998
                            ],
                            [
                                8,
                                0,
                                33469.269016927676
                            ],
                            [
                                8,
                                1,
                                -5450.11828886002
                            ],
                            [
                                8,
                                2,
                                4046.988972768364
                            ],
                            [
                                8,
                                3,
                                14439.174352824599
                            ],
                            [
                                8,
                                4,
                                4064.8746180780113
                            ],
                            [
                                8,
                                5,
                                2831.0456586037685
                            ],
                            [
                                8,
                                6,
                                3921.0004497672912
                            ],
                            [
                                8,
                                7,
                                1089.641924622799
                            ],
                            [
                                8,
                                8,
                                -4029.7555414593367
                            ],
                            [
                                9,
                                -9,
                                -71.61853324339893
                            ],
                            [
                                9,
                                -8,
                                -945.0794418298775
                            ],
                            [
                                9,
                                -7,
                                7087.860045487216
                            ],
                            [
                                9,
                                -6,
                                -4383.627350710747
                            ],
                            [
                                9,
                                -5,
                                -4219.921542971706
                            ],
                            [
                                9,
                                -4,
                                -9451.275496669276
                            ],
                            [
                                9,
                                -3,
                                -2369.66761626678
                            ],
                            [
                                9,
                                -2,
                                5979.213095339066
                            ],
                            [
                                9,
                                -1,
                                11700.690927102161
                            ],
                            [
                                9,
                                0,
                                -889.7781444586826
                            ],
                            [
                                9,
                                1,
                                -7373.530205580146
                            ],
                            [
                                9,
                                2,
                                7899.3735215110955
                            ],
                            [
                                9,
                                3,
                                19744.98195427659
                            ],
                            [
                                9,
                                4,
                                2336.3680177859173
                            ],
                            [
                                9,
                                5,
                                -4827.130439944163
                            ],
                            [
                                9,
                                6,
                                2782.1836214359105
                            ],
                            [
                                9,
                                7,
                                647.8455907540175
                            ],
                            [
                                9,
                                8,
                                -9685.60145813939
                            ],
                            [
                                9,
                                9,
                                415.74150921162544
                            ],
                            [
                                10,
                                -10,
                                1273.8762757369834
                            ],
                            [
                                10,
                                -9,
                                -689.4253154503056
                            ],
                            [
                                10,
                                -8,
                                -2048.5018567269713
                            ],
                            [
                                10,
                                -7,
                                9949.96040718287
                            ],
                            [
                                10,
                                -6,
                                -3509.524439941247
                            ],
                            [
                                10,
                                -5,
                                -5895.401748217719
                            ],
                            [
                                10,
                                -4,
                                -4659.470617228664
                            ],
                            [
                                10,
                                -3,
                                4024.794575477319
                            ],
                            [
                                10,
                                -2,
                                -133.98739198754035
                            ],
                            [
                                10,
                                -1,
                                4489.744989565739
                            ],
                            [
                                10,
                                0,
                                -25199.848955319947
                            ],
                            [
                                10,
                                1,
                                -19273.23046129268
                            ],
                            [
                                10,
                                2,
                                1761.1346165715308
                            ],
                            [
                                10,
                                3,
                                19222.43578072715
                            ],
                            [
                                10,
                                4,
                                3248.438922601825
                            ],
                            [
                                10,
                                5,
                                -10689.704100900688
                            ],
                            [
                                10,
                                6,
                                -562.9141595909259
                            ],
                            [
                                10,
                                7,
                                -789.8123917667426
                            ],
                            [
                                10,
                                8,
                                -14454.997411345577
                            ],
                            [
                                10,
                                9,
                                1141.4117039525822
                            ],
                            [
                                10,
                                10,
                                1301.8937939621173
                            ],
                            [
                                11,
                                -11,
                                -651.3030355297296
                            ],
                            [
                                11,
                                -10,
                                3116.9619305650126
                            ],
                            [
                                11,
                                -9,
                                -2245.2457820690665
                            ],
                            [
                                11,
                                -8,
                                -3294.5493083616766
                            ],
                            [
                                11,
                                -7,
                                11411.599539098932
                            ],
                            [
                                11,
                                -6,
                                -798.3130396154556
                            ],
                            [
                                11,
                                -5,
                                -2739.0344797061953
                            ],
                            [
                                11,
                                -4,
                                2802.7941416942394
                            ],
                            [
                                11,
                                -3,
                                6419.711923145179
                            ],
                            [
                                11,
                                -2,
                                -3381.5347954598706
                            ],
                            [
                                11,
                                -1,
                                -1110.796161407986
                            ],
                            [
                                11,
                                0,
                                -12802.044010305519
                            ],
                            [
                                11,
                                1,
                                -17468.199159949698
                            ],
                            [
                                11,
                                2,
                                -10401.654621504125
                            ],
                            [
                                11,
                                3,
                                10650.598348745572
                            ],
                            [
                                11,
                                4,
                                6330.182231068315
                            ],
                            [
                                11,
                                5,
                                -9622.17902503917
                            ],
                            [
                                11,
                                6,
                                -4647.476735216908
                            ],
                            [
                                11,
                                7,
                                -2375.2543258700666
                            ],
                            [
                                11,
                                8,
                                -13825.757535691118
                            ],
                            [
                                11,
                                9,
                                2095.825217732837
                            ],
                            [
                                11,
                                10,
                                4303.366846697574
                            ],
                            [
                                11,
                                11,
                                194.87356810889017
                            ],
                            [
                                12,
                                -12,
                                -98.87523909469883
                            ],
                            [
                                12,
                                -11,
                                -1662.0136055530716
                            ],
                            [
                                12,
                                -10,
                                4878.547178770435
                            ],
                            [
                                12,
                                -9,
                                -4614.433643451073
                            ],
                            [
                                12,
                                -8,
                                -4043.259677946499
                            ],
                            [
                                12,
                                -7,
                                11164.225065827139
                            ],
                            [
                                12,
                                -6,
                                2884.5454105784197
                            ],
                            [
                                12,
                                -5,
                                3561.571840390574
                            ],
                            [
                                12,
                                -4,
                                7807.47816708741
                            ],
                            [
                                12,
                                -3,
                                5601.83555497242
                            ],
                            [
                                12,
                                -2,
                                -478.52272101866305
                            ],
                            [
                                12,
                                -1,
                                -174.55653307003305
                            ],
                            [
                                12,
                                0,
                                22784.116798900795
                            ],
                            [
                                12,
                                1,
                                6307.844375202007
                            ],
                            [
                                12,
                                2,
                                -15199.049955200759
                            ],
                            [
                                12,
                                3,
                                -2024.609420604928
                            ],
                            [
                                12,
                                4,
                                8946.532330255446
                            ],
                            [
                                12,
                                5,
                                -660.2267877084312
                            ],
                            [
                                12,
                                6,
                                -6846.474660534038
                            ],
                            [
                                12,
                                7,
                                -2683.484578589591
                            ],
                            [
                                12,
                                8,
                                -4986.242618049852
                            ],
                            [
                                12,
                                9,
                                2986.5862130367764
                            ],
                            [
                                12,
                                10,
                                9224.610856067271
                            ],
                            [
                                12,
                                11,
                                1069.842974034949
                            ],
                            [
                                12,
                                12,
                                2857.4890791448356
                            ]
                        ],
                        "types": [
                            "int",
                            "int",
                            "double"
                        ],
                        "subtype": "TableDisplay"
                    }
                },
                "selectedType": "Results",
                "pluginName": "Groovy",
                "shellId": "30067bc0-9ac5-4ce2-a9f5-750b0bcd10d4",
                "elapsedTime": 2486953,
                "height": 681
            },
            "evaluatorReader": true,
            "lineCount": 35
        },
        {
            "id": "markdownK6g4BC",
            "type": "markdown",
            "body": [
                "### Print coefficients"
            ],
            "evaluatorReader": false
        },
        {
            "id": "codeNralSr",
            "type": "code",
            "evaluator": "Groovy",
            "input": {
                "body": [
                    "println \"spherical coefficients:\"",
                    "",
                    "",
                    "SphericalHarmonics.Coef[] coefs = SphericalHarmonics.arrayToCoefs(res.getPoint());",
                    "",
                    "",
                    "def result = []",
                    "//println \"l\\tm\\tvalue\"",
                    "for(SphericalHarmonics.Coef coef in coefs){",
                    "//  println \"${coef.l}\\t${coef.m}\\t${coef.c}\"",
                    "  result << [coef.l, coef.m, coef.c]",
                    "}",
                    "",
                    "new TableDisplay(result, [\"l\",\"m\",\"value\"],[\"int\", \"int\", \"double\"])"
                ]
            },
            "output": {
                "state": {}
            },
            "evaluatorReader": true,
            "lineCount": 14
        },
        {
            "id": "sectionZgy3N7",
            "type": "section",
            "title": "Print results to file",
            "level": 3,
            "evaluatorReader": false,
            "collapsed": false
        },
        {
            "id": "markdownmqc8lc",
            "type": "markdown",
            "body": [
                "### Print results to file"
            ],
            "evaluatorReader": false
        },
        {
            "id": "codeZbENnv",
            "type": "code",
            "evaluator": "Groovy",
            "input": {
                "body": [
                    "import ru.mipt.npm.muon.sim.SphericalHarmonics.Point;",
                    "import ru.mipt.npm.muon.sim.SphericalHarmonics.Coef;",
                    "import ru.mipt.npm.muon.sim.SphericalHarmonics;",
                    "",
                    "File resultFile = new File(baseDir, \"fit.res\")",
                    "",
                    "def writer = resultFile.newPrintWriter()",
                    "writer.println(\"#theta\\tphi\\tvalue\\terr\\tfitValue\");",
                    "",
                    "",
                    "points.each{",
                    "  def fitValue = SphericalHarmonics.sphericalValue(it.theta,it.phi,SphericalHarmonics.arrayToCoefs(fitResult))",
                    "  writer.println(\"${it.theta}\\t${it.phi}\\t${it.value}\\t${it.err}\\t${fitValue}\");",
                    "}",
                    "return null"
                ]
            },
            "output": {
                "state": {},
                "selectedType": "Hidden",
                "pluginName": "Groovy",
                "shellId": "51ae3366-b94e-4077-80d4-f5155cb0ac53",
                "elapsedTime": 3444
            },
            "evaluatorReader": true,
            "lineCount": 15
        },
        {
            "id": "section3LoHBb",
            "type": "section",
            "title": "Monte-Carlo integral",
            "level": 3,
            "evaluatorReader": false,
            "collapsed": false
        },
        {
            "id": "markdownszS53A",
            "type": "markdown",
            "body": [
                "### Monte-Carlo integral"
            ],
            "evaluatorReader": false
        },
        {
            "id": "codeyBuQVR",
            "type": "code",
            "evaluator": "Groovy",
            "input": {
                "body": [
                    "import ru.mipt.npm.muon.sim.SphericalHarmonics.Point;",
                    "import ru.mipt.npm.muon.sim.SphericalHarmonics.Coef;",
                    "import ru.mipt.npm.muon.sim.SphericalHarmonics;",
                    "import org.apache.commons.math3.random.*;",
                    "",
                    "RandomGenerator generator = new JDKRandomGenerator();",
                    "",
                    "int numPoints = 1000000;",
                    "",
                    "double res = 0;",
                    "for(i in (0..numPoints)){",
                    "  double theta = generator.nextDouble()*Math.PI/2;",
                    "  double phi = generator.nextDouble()*2*Math.PI - Math.PI;",
                    "  res += SphericalHarmonics.sphericalValue(theta,phi,SphericalHarmonics.arrayToCoefs(fitResult))",
                    "}",
                    "",
                    "println \"integral value: ${res/numPoints*(Math.PI**2)}\"",
                    "println \"average value: ${res/numPoints}\""
                ]
            },
            "output": {
                "state": {},
                "result": {
                    "type": "Results",
                    "outputdata": [
                        {
                            "type": "out",
                            "value": "integral value: 1889824.468246767\r\naverage value: 191479.25199901403\r\n"
                        }
                    ]
                },
                "selectedType": "Results",
                "pluginName": "Groovy",
                "shellId": "30067bc0-9ac5-4ce2-a9f5-750b0bcd10d4",
                "elapsedTime": 130507,
                "height": 51
            },
            "evaluatorReader": true,
            "lineCount": 18
        }
    ],
    "namespace": {
        "generatedNum": 10000000,
        "surface": 2500
    }
}
