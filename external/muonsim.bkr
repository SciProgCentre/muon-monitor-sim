{
    "beaker": "2",
    "evaluators": [
        {
            "name": "HTML",
            "plugin": "HTML",
            "view": {
                "cm": {
                    "mode": "htmlmixed"
                }
            }
        },
        {
            "name": "JavaScript",
            "plugin": "JavaScript",
            "view": {
                "cm": {
                    "mode": "javascript",
                    "background": "#FFE0F0"
                }
            },
            "languageVersion": "ES2015"
        },
        {
            "name": "Groovy",
            "plugin": "Groovy",
            "imports": "graxxia.*\ncom.twosigma.beaker.NamespaceClient\ncom.twosigma.beaker.BeakerProgressUpdate\ncom.twosigma.beaker.chart.Color\ncom.twosigma.beaker.chart.GradientColor\ncom.twosigma.beaker.chart.legend.*\ncom.twosigma.beaker.chart.Filter\ncom.twosigma.beaker.chart.xychart.*\ncom.twosigma.beaker.chart.xychart.plotitem.*\ncom.twosigma.beaker.chart.categoryplot.*\ncom.twosigma.beaker.chart.categoryplot.plotitem.*\ncom.twosigma.beaker.chart.histogram.*\ncom.twosigma.beaker.chart.treemap.*\ncom.twosigma.beaker.chart.treemap.util.*\nnet.sf.jtreemap.swing.*\ncom.twosigma.beaker.chart.heatmap.HeatMap\ncom.twosigma.beaker.chart.KeyboardCodes\ncom.twosigma.beaker.jvm.object.*\ncom.twosigma.beaker.easyform.*\ncom.twosigma.beaker.easyform.formitem.*",
            "view": {
                "cm": {
                    "mode": "groovy"
                }
            }
        }
    ],
    "cells": [
        {
            "id": "markdownonkwxL",
            "type": "markdown",
            "body": [
                "## Set base enviorment"
            ],
            "evaluatorReader": false
        },
        {
            "id": "baseDirCell",
            "type": "code",
            "evaluator": "Groovy",
            "input": {
                "body": [
                    "baseDir = new File(\"D:\\\\Work\\\\MIPT\\\\Projects\\\\muonsim\")",
                    "",
                    "if(baseDir.exists()){",
                    "  baseDir",
                    "}else {",
                    "  println \"Base directory does not exist\";",
                    "}"
                ]
            },
            "output": {
                "state": {},
                "result": "D:\\Work\\MIPT\\Projects\\muonsim",
                "selectedType": "Text",
                "pluginName": "Groovy",
                "shellId": "63bfd12f-ec83-455c-8e39-e06051602dfb",
                "elapsedTime": 1106,
                "height": 36
            },
            "evaluatorReader": true,
            "lineCount": 7,
            "tags": "required"
        },
        {
            "id": "jarFileCell",
            "type": "code",
            "evaluator": "Groovy",
            "input": {
                "body": [
                    "jarFile = new File(baseDir, \"build\\\\libs\\\\muonsim-1.0-SNAPSHOT-all.jar\")",
                    "",
                    "if(!jarFile.exists()){",
                    "  println \"jar file does not exist. Starting build\"",
                    "  def process = new ProcessBuilder(muonsimPath + \"gradlew.bat\", \"shadowJar\")",
                    "    .redirectErrorStream(true)",
                    "    .directory(new File(muonsimPath))",
                    "    .start()",
                    "  process.text.eachLine {println it}",
                    "}",
                    "",
                    "System.gc();",
                    "ClassLoader.systemClassLoader.addURL(jarFile.toURL())",
                    "println \"loaded fat jar from $jarFile\""
                ]
            },
            "output": {
                "state": {},
                "result": {
                    "type": "Results",
                    "outputdata": [
                        {
                            "type": "out",
                            "value": "loaded fat jar from D:\\Work\\MIPT\\Projects\\muonsim\\build\\libs\\muonsim-1.0-SNAPSHOT-all.jar\r\n"
                        }
                    ]
                },
                "selectedType": "Results",
                "pluginName": "Groovy",
                "shellId": "63bfd12f-ec83-455c-8e39-e06051602dfb",
                "elapsedTime": 571,
                "height": 35
            },
            "evaluatorReader": true,
            "lineCount": 14,
            "tags": "required"
        },
        {
            "id": "markdownXs5bil",
            "type": "markdown",
            "body": [
                "## Reading data"
            ],
            "evaluatorReader": false
        },
        {
            "id": "code6Xru6F",
            "type": "code",
            "evaluator": "Groovy",
            "input": {
                "body": [
                    "dataFile = new File(baseDir,\"output\\\\evalAll.dat\")",
                    "",
                    "if(!dataFile.exists()){",
                    "  return \"DataFile does not exist\";",
                    "}",
                    "",
                    "// number of generated events",
                    "generatedNum = 1e7;",
                    "",
                    "// the total surface of effective central plane",
                    "surface = 16*12.5**2;",
                    "",
                    "/**",
                    "* track data class",
                    "*/",
                    "class TrackData{",
                    "  String trackName;",
                    "  double phi;",
                    "  double theta;",
                    "  double err;",
                    "  int dataCount;",
                    "  int simCount;",
                    "}",
                    "",
                    "//reading file data",
                    "allTracks = []",
                    "dataFile.eachLine{ str, num ->",
                    "  if(num != 1){",
                    "    def nameEnd = str.indexOf(\"]\")",
                    "    String name = str.substring(0,nameEnd+1);",
                    "    List numbers = str.substring(nameEnd + 1).tokenize();",
                    "    allTracks << new TrackData(trackName: name, dataCount: numbers[0].toInteger(),",
                    "                            simCount:numbers[1].toInteger(), phi: numbers[2].toDouble(),",
                    "                            theta: numbers[3].toDouble(), err: numbers[4].toDouble())",
                    "  }",
                    "}",
                    "",
                    "//filtering events with data count less than 3",
                    "tracks = allTracks.findAll{it.dataCount >= 3}",
                    "",
                    "thetaMax = tracks.stream().mapToDouble{it.theta}.max().getAsDouble();",
                    "println \"thetaMax: ${thetaMax}\"",
                    "totalDataCounts = tracks.stream().mapToInt{it.dataCount.toInteger()}.sum();",
                    "println \"totalDataCounts: ${totalDataCounts}\"",
                    "totalSimCounts = tracks.stream().mapToInt{it.simCount.toInteger()}.sum();",
                    "println \"totalSimCounts: ${totalSimCounts}\""
                ]
            },
            "output": {
                "state": {},
                "result": {
                    "type": "Results",
                    "outputdata": [
                        {
                            "type": "out",
                            "value": "thetaMax: 1.283\r\n"
                        },
                        {
                            "type": "out",
                            "value": "totalDataCounts: 117843\r\ntotalSimCounts: 3142032\r\n"
                        }
                    ]
                },
                "selectedType": "Results",
                "pluginName": "Groovy",
                "shellId": "63bfd12f-ec83-455c-8e39-e06051602dfb",
                "elapsedTime": 1264,
                "height": 67
            },
            "evaluatorReader": true,
            "lineCount": 46,
            "tags": "required"
        },
        {
            "id": "markdownmj9zhd",
            "type": "markdown",
            "body": [
                "##Calculatin total flux"
            ],
            "evaluatorReader": false
        },
        {
            "id": "codenE3fRL",
            "type": "code",
            "evaluator": "Groovy",
            "input": {
                "body": [
                    "",
                    "def av(List<TrackData> list){",
                    "  def totalSim = list.sum{it.simCount}",
                    "  //return list.sum{(it.dataCount as double) / it.simCount * generatedNum}/list.size()",
                    "  return list.sum{(it.dataCount as double) * generatedNum**2 / it.simCount**2}/list.sum{generatedNum /it.simCount}",
                    "  //return list.sum{it.dataCount*it.dataCount / it.simCount * generatedNum}/list.sum{it.dataCount}",
                    "}",
                    "println \"wav for all tracks: ${av(allTracks)}\"",
                    "//println \"wav for selected tracks: ${av(selected)}\"",
                    "",
                    "Plot plot = new Plot(xLabel: \"minimal data counts\", yLabel: \"weighted average\");",
                    "def xs = [];",
                    "def ys = [];",
                    "for(i in (1..30)){",
                    "  xs << i",
                    "  def selected = allTracks.findAll{it.dataCount >= i}",
                    "",
                    "  ys << av(selected)",
                    "}",
                    "",
                    "plot << new Points(x: xs, y: ys)",
                    "",
                    ""
                ]
            },
            "output": {
                "state": {},
                "result": {
                    "type": "Results",
                    "outputdata": [
                        {
                            "type": "out",
                            "value": "wav for all tracks: 6214203.089139077\r\n"
                        }
                    ],
                    "payload": {
                        "update_id": "503d97db-0cf3-4295-a94c-acdcd4c19974",
                        "type": "Plot",
                        "init_width": 640,
                        "init_height": 480,
                        "chart_title": null,
                        "show_legend": null,
                        "use_tool_tip": true,
                        "legend_position": {
                            "type": "LegendPosition",
                            "position": "TOP_RIGHT"
                        },
                        "legend_layout": "VERTICAL",
                        "domain_axis_label": "minimal data counts",
                        "y_label": "weighted average",
                        "rangeAxes": [
                            {
                                "type": "YAxis",
                                "label": "weighted average",
                                "auto_range": true,
                                "auto_range_includes_zero": false,
                                "lower_margin": 0.05,
                                "upper_margin": 0.05,
                                "lower_bound": 0,
                                "upper_bound": 0,
                                "use_log": false,
                                "log_base": 10
                            }
                        ],
                        "x_lower_margin": 0.05,
                        "x_upper_margin": 0.05,
                        "y_auto_range": true,
                        "y_auto_range_includes_zero": false,
                        "y_lower_margin": 0.05,
                        "y_upper_margin": 0.05,
                        "y_lower_bound": 0,
                        "y_upper_bound": 0,
                        "log_y": false,
                        "timezone": null,
                        "crosshair": null,
                        "omit_checkboxes": false,
                        "graphics_list": [
                            {
                                "type": "Points",
                                "uid": "352cfeff-8a56-4848-b81a-8b561b0b6e28",
                                "visible": true,
                                "yAxis": null,
                                "hasClickAction": false,
                                "x": [
                                    1,
                                    2,
                                    3,
                                    4,
                                    5,
                                    6,
                                    7,
                                    8,
                                    9,
                                    10,
                                    11,
                                    12,
                                    13,
                                    14,
                                    15,
                                    16,
                                    17,
                                    18,
                                    19,
                                    20,
                                    21,
                                    22,
                                    23,
                                    24,
                                    25,
                                    26,
                                    27,
                                    28,
                                    29,
                                    30
                                ],
                                "y": [
                                    6214203.089139077,
                                    8232478.118991985,
                                    7147567.241813233,
                                    5860156.012228549,
                                    3637651.67638985,
                                    3099072.8202723037,
                                    3861044.6011728984,
                                    1094857.3034599535,
                                    1011756.0428071261,
                                    951768.0515487118,
                                    901574.0750898795,
                                    846494.851071695,
                                    786931.7886017415,
                                    729841.9737277317,
                                    698958.4219583635,
                                    672887.3371574994,
                                    623565.2842605799,
                                    614728.5059096433,
                                    587439.098521745,
                                    587005.7864606535,
                                    572720.0966182051,
                                    572315.1974159128,
                                    572524.5243546382,
                                    569712.5749435893,
                                    558780.8657453107,
                                    551959.3465173111,
                                    556253.9608254473,
                                    565463.1511846043,
                                    564075.1603822734,
                                    573239.6371260801
                                ],
                                "display_name": "",
                                "size": 6,
                                "shape": "DEFAULT",
                                "fill": null,
                                "color": null,
                                "outline_color": null
                            }
                        ],
                        "constant_lines": [],
                        "constant_bands": [],
                        "texts": [],
                        "x_auto_range": true,
                        "x_lower_bound": 0,
                        "x_upper_bound": 0,
                        "log_x": false,
                        "x_log_base": 10,
                        "tips": {}
                    }
                },
                "selectedType": "Results",
                "pluginName": "Groovy",
                "shellId": "2505fdcd-352d-4032-95de-84dd1f7e86b2",
                "elapsedTime": 2691,
                "height": 520
            },
            "evaluatorReader": true,
            "lineCount": 23
        },
        {
            "id": "markdownRcQtnl",
            "type": "markdown",
            "body": [
                "## Searching for inefficient pixels",
                "dumb $n^2$ algorithm"
            ],
            "evaluatorReader": false
        },
        {
            "id": "codeAG4sKD",
            "type": "code",
            "evaluator": "Groovy",
            "input": {
                "body": [
                    "def candidates = new HashSet()",
                    "",
                    "def isParallel(track1, track2){",
                    "  return Math.abs(track1.phi - track2.phi) < 0.002 && Math.abs(track1.theta - track2.theta) < 0.002",
                    "}",
                    "",
                    "//searching for pixel among parallel ones with number of counts less than in parallel ones",
                    "for(track in tracks){",
                    "  for(secondTrack in tracks){",
                    "    if(isParallel(track, secondTrack)){",
                    "      //selecting ones beyond 3 sigma bound",
                    "      if(track.dataCount < secondTrack.dataCount - 3*Math.sqrt(secondTrack.dataCount)){",
                    "        candidates << track",
                    "      }",
                    "    }",
                    "  }",
                    "}",
                    "",
                    "Map<String, Integer> pixelCandidates = [:]",
                    "",
                    "candidates.each{",
                    "//  println it.trackName",
                    "  it.trackName.substring(1, it.trackName.size() - 1).split(\",\"). each{pixel ->",
                    "    def pixelName = pixel.trim();",
                    "    pixelCandidates.put(pixelName, (pixelCandidates.get(pixelName) ?: 0) + 1)",
                    "  }",
                    "}",
                    "",
                    "pixelCandidates",
                    ""
                ]
            },
            "output": {
                "state": {
                    "datatablestate": {
                        "pagination": {
                            "use": true,
                            "rowsToDisplay": 25,
                            "fixLeft": 0,
                            "fixRight": 0
                        },
                        "columnNames": [
                            "Key",
                            "Value"
                        ],
                        "actualtype": [
                            0,
                            0
                        ],
                        "actualalign": [
                            "L",
                            "L"
                        ],
                        "colorder": [
                            0,
                            1,
                            2
                        ],
                        "getCellSho": [
                            true,
                            true
                        ],
                        "barsOnColumn": {},
                        "heatmapOnColumn": {},
                        "tableFilter": "",
                        "showFilter": false,
                        "columnSearchActive": false,
                        "columnFilter": [],
                        "columnWidth": []
                    }
                },
                "result": {
                    "type": "TableDisplay",
                    "columnNames": [
                        "Key",
                        "Value"
                    ],
                    "values": [
                        [
                            "SC77_2",
                            5
                        ],
                        [
                            "SC83_5",
                            3
                        ],
                        [
                            "SC94_3",
                            1
                        ],
                        [
                            "SC79_9",
                            2
                        ],
                        [
                            "SC82_13",
                            6
                        ],
                        [
                            "SC92_2",
                            4
                        ],
                        [
                            "SC76_3",
                            3
                        ],
                        [
                            "SC82_8",
                            5
                        ],
                        [
                            "SC84_0",
                            4
                        ],
                        [
                            "SC93_15",
                            2
                        ],
                        [
                            "SC80_1",
                            1
                        ],
                        [
                            "SC81_6",
                            4
                        ],
                        [
                            "SC81_7",
                            3
                        ],
                        [
                            "SC91_3",
                            1
                        ],
                        [
                            "SC83_1",
                            1
                        ],
                        [
                            "SC85_7",
                            3
                        ],
                        [
                            "SC79_15",
                            2
                        ],
                        [
                            "SC81_11",
                            2
                        ],
                        [
                            "SC92_9",
                            3
                        ],
                        [
                            "SC76_4",
                            2
                        ],
                        [
                            "SC81_1",
                            4
                        ],
                        [
                            "SC86_10",
                            3
                        ],
                        [
                            "SC77_10",
                            1
                        ],
                        [
                            "SC83_13",
                            6
                        ],
                        [
                            "SC94_10",
                            1
                        ],
                        [
                            "SC79_5",
                            3
                        ],
                        [
                            "SC81_0",
                            2
                        ],
                        [
                            "SC87_15",
                            1
                        ],
                        [
                            "SC82_12",
                            5
                        ],
                        [
                            "SC84_4",
                            2
                        ],
                        [
                            "SC92_8",
                            2
                        ],
                        [
                            "SC76_12",
                            3
                        ],
                        [
                            "SC84_14",
                            3
                        ],
                        [
                            "SC84_15",
                            1
                        ],
                        [
                            "SC85_10",
                            2
                        ],
                        [
                            "SC77_9",
                            3
                        ],
                        [
                            "SC83_4",
                            1
                        ],
                        [
                            "SC91_11",
                            3
                        ],
                        [
                            "SC76_11",
                            2
                        ],
                        [
                            "SC84_8",
                            5
                        ],
                        [
                            "SC96_13",
                            4
                        ],
                        [
                            "SC76_5",
                            5
                        ],
                        [
                            "SC83_2",
                            7
                        ],
                        [
                            "SC83_3",
                            2
                        ],
                        [
                            "SC85_4",
                            2
                        ],
                        [
                            "SC77_3",
                            4
                        ],
                        [
                            "SC81_14",
                            5
                        ],
                        [
                            "SC91_5",
                            3
                        ],
                        [
                            "SC76_1",
                            1
                        ],
                        [
                            "SC84_7",
                            3
                        ],
                        [
                            "SC83_10",
                            5
                        ],
                        [
                            "SC75_7",
                            5
                        ],
                        [
                            "SC77_13",
                            3
                        ],
                        [
                            "SC83_6",
                            3
                        ],
                        [
                            "SC75_15",
                            3
                        ],
                        [
                            "SC84_9",
                            2
                        ],
                        [
                            "SC76_14",
                            2
                        ],
                        [
                            "SC83_9",
                            4
                        ],
                        [
                            "SC85_6",
                            5
                        ],
                        [
                            "SC75_4",
                            1
                        ],
                        [
                            "SC84_3",
                            3
                        ],
                        [
                            "SC93_12",
                            2
                        ],
                        [
                            "SC76_13",
                            3
                        ],
                        [
                            "SC85_5",
                            4
                        ],
                        [
                            "SC78_15",
                            2
                        ],
                        [
                            "SC82_9",
                            2
                        ],
                        [
                            "SC93_14",
                            1
                        ],
                        [
                            "SC76_15",
                            3
                        ],
                        [
                            "SC85_9",
                            1
                        ],
                        [
                            "SC85_1",
                            3
                        ],
                        [
                            "SC79_6",
                            2
                        ],
                        [
                            "SC81_3",
                            2
                        ],
                        [
                            "SC92_0",
                            3
                        ],
                        [
                            "SC77_0",
                            1
                        ],
                        [
                            "SC80_8",
                            4
                        ],
                        [
                            "SC91_1",
                            2
                        ],
                        [
                            "SC83_0",
                            2
                        ],
                        [
                            "SC92_14",
                            3
                        ],
                        [
                            "SC84_1",
                            3
                        ],
                        [
                            "SC96_7",
                            2
                        ],
                        [
                            "SC75_6",
                            4
                        ],
                        [
                            "SC96_0",
                            1
                        ],
                        [
                            "SC82_11",
                            2
                        ],
                        [
                            "SC93_1",
                            1
                        ],
                        [
                            "SC77_8",
                            2
                        ],
                        [
                            "SC75_14",
                            2
                        ],
                        [
                            "SC96_6",
                            1
                        ],
                        [
                            "SC81_13",
                            6
                        ],
                        [
                            "SC86_11",
                            2
                        ],
                        [
                            "SC80_2",
                            2
                        ],
                        [
                            "SC92_4",
                            2
                        ],
                        [
                            "SC79_11",
                            5
                        ],
                        [
                            "SC92_1",
                            3
                        ],
                        [
                            "SC76_9",
                            3
                        ],
                        [
                            "SC84_5",
                            1
                        ],
                        [
                            "SC85_3",
                            2
                        ],
                        [
                            "SC92_11",
                            3
                        ],
                        [
                            "SC80_10",
                            3
                        ],
                        [
                            "SC81_5",
                            4
                        ],
                        [
                            "SC92_6",
                            6
                        ],
                        [
                            "SC73_4",
                            1
                        ],
                        [
                            "SC92_13",
                            2
                        ],
                        [
                            "SC81_15",
                            3
                        ],
                        [
                            "SC80_13",
                            1
                        ],
                        [
                            "SC86_1",
                            1
                        ],
                        [
                            "SC74_2",
                            1
                        ],
                        [
                            "SC73_3",
                            1
                        ],
                        [
                            "SC96_14",
                            1
                        ],
                        [
                            "SC80_9",
                            4
                        ],
                        [
                            "SC86_8",
                            2
                        ],
                        [
                            "SC85_0",
                            4
                        ],
                        [
                            "SC76_7",
                            1
                        ],
                        [
                            "SC87_14",
                            1
                        ],
                        [
                            "SC84_2",
                            2
                        ],
                        [
                            "SC96_1",
                            2
                        ],
                        [
                            "SC77_1",
                            2
                        ],
                        [
                            "SC81_12",
                            2
                        ],
                        [
                            "SC92_7",
                            1
                        ],
                        [
                            "SC75_5",
                            2
                        ],
                        [
                            "SC96_4",
                            1
                        ],
                        [
                            "SC79_7",
                            1
                        ],
                        [
                            "SC87_8",
                            1
                        ],
                        [
                            "SC80_11",
                            1
                        ],
                        [
                            "SC80_12",
                            1
                        ],
                        [
                            "SC79_13",
                            1
                        ],
                        [
                            "SC81_2",
                            3
                        ],
                        [
                            "SC79_1",
                            2
                        ],
                        [
                            "SC82_7",
                            2
                        ],
                        [
                            "SC87_12",
                            1
                        ],
                        [
                            "SC75_9",
                            1
                        ],
                        [
                            "SC96_5",
                            2
                        ],
                        [
                            "SC73_2",
                            1
                        ],
                        [
                            "SC84_13",
                            1
                        ],
                        [
                            "SC78_6",
                            1
                        ],
                        [
                            "SC82_3",
                            2
                        ],
                        [
                            "SC93_0",
                            3
                        ],
                        [
                            "SC74_3",
                            2
                        ],
                        [
                            "SC83_8",
                            1
                        ],
                        [
                            "SC72_4",
                            1
                        ],
                        [
                            "SC84_10",
                            3
                        ],
                        [
                            "SC75_12",
                            2
                        ],
                        [
                            "SC73_7",
                            1
                        ],
                        [
                            "SC91_4",
                            1
                        ],
                        [
                            "SC78_5",
                            4
                        ],
                        [
                            "SC82_0",
                            1
                        ],
                        [
                            "SC88_15",
                            1
                        ],
                        [
                            "SC82_14",
                            1
                        ],
                        [
                            "SC82_6",
                            3
                        ],
                        [
                            "SC72_7",
                            2
                        ],
                        [
                            "SC84_12",
                            1
                        ],
                        [
                            "SC76_2",
                            2
                        ],
                        [
                            "SC93_7",
                            1
                        ],
                        [
                            "SC79_10",
                            3
                        ],
                        [
                            "SC79_2",
                            1
                        ],
                        [
                            "SC82_5",
                            1
                        ],
                        [
                            "SC92_10",
                            4
                        ],
                        [
                            "SC78_14",
                            2
                        ],
                        [
                            "SC82_1",
                            3
                        ],
                        [
                            "SC93_5",
                            4
                        ],
                        [
                            "SC91_2",
                            3
                        ],
                        [
                            "SC82_2",
                            4
                        ],
                        [
                            "SC82_10",
                            2
                        ],
                        [
                            "SC93_4",
                            2
                        ],
                        [
                            "SC94_2",
                            3
                        ],
                        [
                            "SC85_14",
                            1
                        ],
                        [
                            "SC80_5",
                            1
                        ],
                        [
                            "SC78_13",
                            1
                        ],
                        [
                            "SC88_12",
                            1
                        ],
                        [
                            "SC84_11",
                            1
                        ],
                        [
                            "SC96_9",
                            1
                        ],
                        [
                            "SC83_14",
                            1
                        ],
                        [
                            "SC94_9",
                            1
                        ],
                        [
                            "SC74_0",
                            1
                        ],
                        [
                            "SC76_6",
                            1
                        ],
                        [
                            "SC84_6",
                            3
                        ],
                        [
                            "SC93_13",
                            2
                        ],
                        [
                            "SC83_7",
                            2
                        ],
                        [
                            "SC79_12",
                            2
                        ],
                        [
                            "SC92_5",
                            1
                        ],
                        [
                            "SC94_0",
                            2
                        ],
                        [
                            "SC76_0",
                            1
                        ],
                        [
                            "SC91_9",
                            1
                        ],
                        [
                            "SC91_12",
                            1
                        ],
                        [
                            "SC96_15",
                            1
                        ],
                        [
                            "SC73_6",
                            1
                        ],
                        [
                            "SC83_11",
                            1
                        ],
                        [
                            "SC85_13",
                            1
                        ],
                        [
                            "SC81_8",
                            1
                        ],
                        [
                            "SC76_10",
                            1
                        ],
                        [
                            "SC82_15",
                            1
                        ],
                        [
                            "SC93_6",
                            1
                        ]
                    ],
                    "subtype": "Dictionary"
                },
                "selectedType": "Table",
                "pluginName": "Groovy",
                "shellId": "2505fdcd-352d-4032-95de-84dd1f7e86b2",
                "elapsedTime": 15417,
                "height": 631
            },
            "evaluatorReader": true,
            "lineCount": 30
        },
        {
            "id": "markdownrHU49j",
            "type": "markdown",
            "body": [
                "## Generating 2d function using gauss smoothing with widths proportional to errors",
                "In order to get smooth picture, we need multiply errors by a factor of 3"
            ],
            "evaluatorReader": false
        },
        {
            "id": "codefa0K5N",
            "type": "code",
            "evaluator": "Groovy",
            "input": {
                "body": [
                    "simTracks = []",
                    "File dataFile = new File(baseDir,\"output\\\\hits.dat\") ",
                    "dataFile.eachLine{ str, num ->",
                    "  if(num != 1){",
                    "    def nameEnd = str.indexOf(\"]\")",
                    "    String name = str.substring(0,nameEnd+1);",
                    "    List numbers = str.substring(nameEnd + 1).tokenize();",
                    "    simTracks << new TrackData(trackName: name, dataCount: 0,",
                    "                            simCount:numbers[0].toInteger(), phi: numbers[1].toDouble(),",
                    "                            theta: numbers[2].toDouble(), err: numbers[3].toDouble())",
                    "  }",
                    "}",
                    "",
                    "thetaMax = simTracks.stream().mapToDouble{it.theta}.max().getAsDouble();",
                    "totalSimCounts = simTracks.stream().mapToInt{it.simCount.toInteger()}.sum();",
                    "",
                    "",
                    "println \"file read complete\"",
                    "",
                    "//bivariate uncorrelated normal distribution",
                    "double gaussian(phi,theta,sigma,phi0,theta0){",
                    "  double res = 1/(2*Math.PI*sigma**2)*Math.exp(-(phi-phi0)**2/sigma**2 - (theta - theta0)**2/sigma**2)",
                    "  if(!Double.isNaN(res)){",
                    "    return res;",
                    "  } else{",
                    "    return 0d;",
                    "  }",
                    "}",
                    "",
                    "// using method instead of closure for performance",
                    "double sum(phi0,theta0){",
                    "  simTracks.stream().mapToDouble{track -> track.simCount.toDouble()*gaussian(track.phi, track.theta, track.err, phi0,theta0)}.average().getAsDouble()",
                    "  //tracks.stream().mapToDouble{track -> track.dataCount.toDouble() / track.simCount.toDouble() * gaussian(track.phi, track.theta, track.err*3, phi0,theta0)}.sum()",
                    "}",
                    "",
                    "//defining grid",
                    "def phiNodes = 60;",
                    "def thetaNodes = 40;",
                    "",
                    "def phiStep = 2* Math.PI / phiNodes;",
                    "def thetaStep = thetaMax / thetaNodes;",
                    "List<List> nodes = []",
                    "",
                    "for(double phi = -Math.PI; phi < Math.PI;  phi += phiStep){",
                    "  for(double theta = 0; theta < thetaMax; theta += thetaStep){",
                    "    nodes << [phi*180/Math.PI, theta*180/Math.PI, sum(phi,theta)]",
                    "  }",
                    "}",
                    "",
                    "nodes",
                    "",
                    "//printing results",
                    "//for(Tuple node: nodes){",
                    "//  println \"${node[0]}\\t${node[1]}\\t${node[2] / totalDataCounts * totalSimCounts}\"",
                    "//}"
                ]
            },
            "output": {
                "state": {},
                "result": {
                    "type": "BeakerDisplay",
                    "innertype": "Error",
                    "object": [
                        "java.io.FileNotFoundException: D:\\Work\\MIPT\\Projects\\muonsim\\hits.dat (The system cannot find the file specified)\r<br/>",
                        "\tat script1476615373462594597305.run(script1476615373462594597305.groovy:3)\r",
                        "\tat com.twosigma.beaker.groovy.utils.GroovyEvaluator$workerThread$MyRunnable.run(GroovyEvaluator.java:378)\r",
                        ""
                    ]
                },
                "selectedType": "BeakerDisplay",
                "pluginName": "Groovy",
                "shellId": "2505fdcd-352d-4032-95de-84dd1f7e86b2",
                "elapsedTime": 587,
                "height": 68
            },
            "evaluatorReader": true,
            "lineCount": 55
        },
        {
            "id": "markdownuJgsDF",
            "type": "markdown",
            "body": [
                "## Fit using spherical garmonics"
            ],
            "evaluatorReader": false
        },
        {
            "id": "codeOrvswh",
            "type": "code",
            "evaluator": "Groovy",
            "input": {
                "body": [
                    "startPoint = null"
                ]
            },
            "output": {
                "state": {},
                "selectedType": "Hidden",
                "pluginName": "Groovy",
                "shellId": "63bfd12f-ec83-455c-8e39-e06051602dfb",
                "elapsedTime": 578
            },
            "evaluatorReader": true,
            "lineCount": 1
        },
        {
            "id": "codeTPDPQY",
            "type": "code",
            "evaluator": "Groovy",
            "input": {
                "body": [
                    "import ru.mipt.npm.muon.sim.SphericalHarmonics.Point;",
                    "import ru.mipt.npm.muon.sim.SphericalHarmonics.Coef;",
                    "import ru.mipt.npm.muon.sim.SphericalHarmonics;",
                    "import org.apache.commons.math3.optim.*",
                    "import org.apache.commons.math3.optim.nonlinear.scalar.*",
                    "import org.apache.commons.math3.optim.nonlinear.scalar.noderiv.*",
                    "import java.util.stream.Collectors;",
                    "",
                    "int l = 7;",
                    "",
                    "def points = tracks.stream().map{ new Point(it.theta, it.phi,it.dataCount/it.simCount*generatedNum,Math.sqrt(it.dataCount)/it.simCount*generatedNum)}.toArray{i -> new Point[i]}",
                    "",
                    "def dim = (l+1)**2;",
                    "def optimizer = new SimplexOptimizer(0.001, 0.001);",
                    "",
                    "def start = startPoint ?: new double[dim];",
                    "//def start = new double[dim];",
                    "def steps = new double[dim];",
                    "",
                    "Arrays.fill(steps,10)",
                    "",
                    "def function = SphericalHarmonics.chi2SphericalFunction(points);",
                    "",
                    "def res = optimizer.optimize(",
                    "  new ObjectiveFunction(function),",
                    "  GoalType.MINIMIZE,",
                    "  new NelderMeadSimplex(steps),",
                    "  new InitialGuess(start),",
                    "  new MaxEval(1e7 as int),",
                    "  new MaxIter(1e5 as int)",
                    ")",
                    "",
                    "startPoint = res.getPoint()",
                    "",
                    "println \"chi^2 = ${res.getValue()}/${points.length} = ${res.getValue()/points.length}\";",
                    "println()",
                    "println \"spherical coefficients:\"",
                    "",
                    "//println res.getPoint()",
                    "",
                    "SphericalHarmonics.Coef[] coefs = SphericalHarmonics.arrayToCoefs(res.getPoint());",
                    "",
                    "println \"l\\tm\\tvalue\"",
                    "for(SphericalHarmonics.Coef coef in coefs){",
                    "  println \"${coef.l}\\t${coef.m}\\t${coef.c}\"",
                    "}"
                ]
            },
            "output": {
                "state": {},
                "result": {
                    "type": "Results",
                    "outputdata": [
                        {
                            "type": "out",
                            "value": "chi^2 = 113182.23704314462/12380 = 9.142345480060147\r\n\r\nspherical coefficients:\r\nl\tm\tvalue\r\n0\t0\t6630.0\r\n1\t-1\t6526.40625\r\n1\t0\t6422.8125\r\n1\t1\t6319.21875\r\n2\t-2\t6215.625\r\n2\t-1\t6112.03125\r\n2\t0\t6008.4375\r\n2\t1\t5904.84375\r\n2\t2\t5801.25\r\n3\t-3\t5697.65625\r\n3\t-2\t5594.0625\r\n3\t-1\t5490.46875\r\n3\t0\t5386.875\r\n3\t1\t5283.28125\r\n3\t2\t5179.6875\r\n3\t3\t5076.09375\r\n4\t-4\t4972.5\r\n"
                        },
                        {
                            "type": "out",
                            "value": "4\t-3\t4868.90625\r\n4\t-2\t4765.3125\r\n4\t-1\t4661.71875\r\n4\t0\t4558.125\r\n4\t1\t4454.53125\r\n4\t2\t4350.9375\r\n4\t3\t4247.34375\r\n4\t4\t4143.75\r\n5\t-5\t4040.15625\r\n5\t-4\t3936.5625\r\n5\t-3\t3832.96875\r\n5\t-2\t3729.375\r\n5\t-1\t3625.78125\r\n5\t0\t3522.1875\r\n5\t1\t3418.59375\r\n5\t2\t3315.0\r\n5\t3\t3211.40625\r\n5\t4\t3107.8125\r\n5\t5\t3004.21875\r\n6\t-6\t2900.625\r\n6\t-5\t2797.03125\r\n"
                        },
                        {
                            "type": "out",
                            "value": "6\t-4\t2693.4375\r\n6\t-3\t2589.84375\r\n6\t-2\t2486.25\r\n6\t-1\t2382.65625\r\n6\t0\t2279.0625\r\n6\t1\t2175.46875\r\n6\t2\t2071.875\r\n6\t3\t1968.28125\r\n6\t4\t1864.6875\r\n6\t5\t1761.09375\r\n6\t6\t1657.5\r\n7\t-7\t1553.90625\r\n7\t-6\t1450.3125\r\n7\t-5\t1346.71875\r\n7\t-4\t1243.125\r\n7\t-3\t1139.53125\r\n7\t-2\t1035.9375\r\n7\t-1\t932.34375\r\n7\t0\t828.75\r\n7\t1\t725.15625\r\n7\t2\t621.5625\r\n"
                        },
                        {
                            "type": "out",
                            "value": "7\t3\t517.96875\r\n7\t4\t414.375\r\n7\t5\t310.78125\r\n7\t6\t207.1875\r\n7\t7\t103.59375\r\n"
                        }
                    ]
                },
                "selectedType": "Results",
                "pluginName": "Groovy",
                "shellId": "63bfd12f-ec83-455c-8e39-e06051602dfb",
                "elapsedTime": 38069,
                "height": 1107
            },
            "evaluatorReader": true,
            "lineCount": 46
        }
    ],
    "namespace": {
        "generatedNum": 10000000,
        "surface": 2500
    }
}
